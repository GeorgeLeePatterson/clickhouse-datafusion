
running 1 test
Complex Plan:
Projection(Projection { expr: [Column(Column { relation: Some(Bare { table: "final" }), name: "employee_name" }), Column(Column { relation: Some(Bare { table: "final" }), name: "department_name" }), Alias(Alias { expr: ScalarFunction(ScalarFunction { func: ScalarUDF { inner: ExpFunc { signature: Signature { type_signature: Uniform(1, [Float64, Float32]), volatility: Immutable } } }, args: [Column(Column { relation: Some(Bare { table: "final" }), name: "total_compensation" })] }), relation: None, name: "exp_compensation", metadata: None }), Alias(Alias { expr: ScalarFunction(ScalarFunction { func: ScalarUDF { inner: LnFunc { signature: Signature { type_signature: Uniform(1, [Float64, Float32]), volatility: Immutable } } }, args: [Column(Column { relation: Some(Bare { table: "final" }), name: "dept_budget" })] }), relation: None, name: "ln_budget", metadata: None }), Alias(Alias { expr: ScalarFunction(ScalarFunction { func: ScalarUDF { inner: SqrtFunc { signature: Signature { type_signature: Uniform(1, [Float64, Float32]), volatility: Immutable } } }, args: [Column(Column { relation: Some(Bare { table: "final" }), name: "bonus" })] }), relation: None, name: "sqrt_bonus", metadata: None })], input: Filter(Filter { predicate: BinaryExpr(BinaryExpr { left: ScalarFunction(ScalarFunction { func: ScalarUDF { inner: PowerFunc { signature: Signature { type_signature: OneOf([Exact([Int64, Int64]), Exact([Float64, Float64])]), volatility: Immutable }, aliases: ["pow"] } }, args: [Column(Column { relation: Some(Bare { table: "final" }), name: "total_compensation" }), Literal(Int64(2), None)] }), op: Gt, right: Literal(Int64(1000), None) }), input: SubqueryAlias(SubqueryAlias { input: Projection(Projection { expr: [Column(Column { relation: Some(Bare { table: "emp_dept" }), name: "employee_name" }), Column(Column { relation: Some(Bare { table: "emp_dept" }), name: "department_name" }), Alias(Alias { expr: BinaryExpr(BinaryExpr { left: Column(Column { relation: Some(Bare { table: "emp_dept" }), name: "base_salary" }), op: Plus, right: ScalarFunction(ScalarFunction { func: ScalarUDF { inner: CoalesceFunc { signature: Signature { type_signature: UserDefined, volatility: Immutable } } }, args: [Column(Column { relation: Some(Bare { table: "b" }), name: "total_bonus" }), Literal(Int64(0), None)] }) }), relation: None, name: "total_compensation", metadata: None }), Column(Column { relation: Some(Bare { table: "emp_dept" }), name: "dept_budget" }), Alias(Alias { expr: ScalarFunction(ScalarFunction { func: ScalarUDF { inner: CoalesceFunc { signature: Signature { type_signature: UserDefined, volatility: Immutable } } }, args: [Column(Column { relation: Some(Bare { table: "b" }), name: "total_bonus" }), Literal(Int64(0), None)] }), relation: None, name: "bonus", metadata: None })], input: Join(Join { left: SubqueryAlias(SubqueryAlias { input: Projection(Projection { expr: [Alias(Alias { expr: Column(Column { relation: Some(Bare { table: "e" }), name: "id" }), relation: None, name: "employee_id", metadata: None }), Alias(Alias { expr: Column(Column { relation: Some(Bare { table: "e" }), name: "name" }), relation: None, name: "employee_name", metadata: None }), Alias(Alias { expr: ScalarFunction(ScalarFunction { func: ScalarUDF { inner: ExpFunc { signature: Signature { type_signature: Uniform(1, [Float64, Float32]), volatility: Immutable } } }, args: [Column(Column { relation: Some(Bare { table: "e" }), name: "salary" })] }), relation: None, name: "base_salary", metadata: None }), Alias(Alias { expr: Column(Column { relation: Some(Bare { table: "d" }), name: "name" }), relation: None, name: "department_name", metadata: None }), Alias(Alias { expr: ScalarFunction(ScalarFunction { func: ScalarUDF { inner: LnFunc { signature: Signature { type_signature: Uniform(1, [Float64, Float32]), volatility: Immutable } } }, args: [Column(Column { relation: Some(Bare { table: "d" }), name: "budget" })] }), relation: None, name: "dept_budget", metadata: None })], input: Filter(Filter { predicate: BinaryExpr(BinaryExpr { left: ScalarFunction(ScalarFunction { func: ScalarUDF { inner: SqrtFunc { signature: Signature { type_signature: Uniform(1, [Float64, Float32]), volatility: Immutable } } }, args: [Column(Column { relation: Some(Bare { table: "e" }), name: "salary" })] }), op: Gt, right: Literal(Int64(100), None) }), input: Join(Join { left: SubqueryAlias(SubqueryAlias { input: TableScan(TableScan { table_name: Bare { table: "employees" }, source: "...", projection: None, projected_schema: DFSchema { inner: Schema { fields: [Field { name: "id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "salary", data_type: Decimal128(38, 10), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "department_id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "employees" }), Some(Bare { table: "employees" }), Some(Bare { table: "employees" }), Some(Bare { table: "employees" })], functional_dependencies: FunctionalDependencies { deps: [] } }, filters: [], fetch: None, .. }), alias: Bare { table: "e" }, schema: DFSchema { inner: Schema { fields: [Field { name: "id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "salary", data_type: Decimal128(38, 10), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "department_id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "e" }), Some(Bare { table: "e" }), Some(Bare { table: "e" }), Some(Bare { table: "e" })], functional_dependencies: FunctionalDependencies { deps: [] } } }), right: SubqueryAlias(SubqueryAlias { input: TableScan(TableScan { table_name: Bare { table: "departments" }, source: "...", projection: None, projected_schema: DFSchema { inner: Schema { fields: [Field { name: "id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "budget", data_type: Decimal128(38, 10), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "departments" }), Some(Bare { table: "departments" }), Some(Bare { table: "departments" })], functional_dependencies: FunctionalDependencies { deps: [] } }, filters: [], fetch: None, .. }), alias: Bare { table: "d" }, schema: DFSchema { inner: Schema { fields: [Field { name: "id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "budget", data_type: Decimal128(38, 10), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "d" }), Some(Bare { table: "d" }), Some(Bare { table: "d" })], functional_dependencies: FunctionalDependencies { deps: [] } } }), on: [], filter: Some(BinaryExpr(BinaryExpr { left: Column(Column { relation: Some(Bare { table: "e" }), name: "department_id" }), op: Eq, right: Column(Column { relation: Some(Bare { table: "d" }), name: "id" }) })), join_type: Inner, join_constraint: On, schema: DFSchema { inner: Schema { fields: [Field { name: "id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "salary", data_type: Decimal128(38, 10), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "department_id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "budget", data_type: Decimal128(38, 10), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "e" }), Some(Bare { table: "e" }), Some(Bare { table: "e" }), Some(Bare { table: "e" }), Some(Bare { table: "d" }), Some(Bare { table: "d" }), Some(Bare { table: "d" })], functional_dependencies: FunctionalDependencies { deps: [] } }, null_equals_null: false }) }), schema: DFSchema { inner: Schema { fields: [Field { name: "employee_id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "employee_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "base_salary", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "department_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "dept_budget", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [None, None, None, None, None], functional_dependencies: FunctionalDependencies { deps: [] } } }), alias: Bare { table: "emp_dept" }, schema: DFSchema { inner: Schema { fields: [Field { name: "employee_id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "employee_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "base_salary", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "department_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "dept_budget", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "emp_dept" }), Some(Bare { table: "emp_dept" }), Some(Bare { table: "emp_dept" }), Some(Bare { table: "emp_dept" }), Some(Bare { table: "emp_dept" })], functional_dependencies: FunctionalDependencies { deps: [] } } }), right: SubqueryAlias(SubqueryAlias { input: Projection(Projection { expr: [Column(Column { relation: Some(Bare { table: "bonuses" }), name: "employee_id" }), Alias(Alias { expr: Column(Column { relation: None, name: "exp(bonuses.bonus_amount)" }), relation: None, name: "exp_bonus", metadata: None }), Alias(Alias { expr: Column(Column { relation: None, name: "sum(bonuses.bonus_amount * bonuses.multiplier)" }), relation: None, name: "total_bonus", metadata: None })], input: Aggregate(Aggregate { input: Filter(Filter { predicate: BinaryExpr(BinaryExpr { left: ScalarFunction(ScalarFunction { func: ScalarUDF { inner: LnFunc { signature: Signature { type_signature: Uniform(1, [Float64, Float32]), volatility: Immutable } } }, args: [Column(Column { relation: Some(Bare { table: "bonuses" }), name: "multiplier" })] }), op: Gt, right: Literal(Int64(0), None) }), input: TableScan(TableScan { table_name: Bare { table: "bonuses" }, source: "...", projection: None, projected_schema: DFSchema { inner: Schema { fields: [Field { name: "employee_id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "bonus_amount", data_type: Decimal128(38, 10), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "multiplier", data_type: Decimal128(38, 10), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "bonuses" }), Some(Bare { table: "bonuses" }), Some(Bare { table: "bonuses" })], functional_dependencies: FunctionalDependencies { deps: [] } }, filters: [], fetch: None, .. }) }), group_expr: [Column(Column { relation: Some(Bare { table: "bonuses" }), name: "employee_id" }), ScalarFunction(ScalarFunction { func: ScalarUDF { inner: ExpFunc { signature: Signature { type_signature: Uniform(1, [Float64, Float32]), volatility: Immutable } } }, args: [Column(Column { relation: Some(Bare { table: "bonuses" }), name: "bonus_amount" })] })], aggr_expr: [AggregateFunction(AggregateFunction { func: AggregateUDF { inner: Sum { signature: Signature { type_signature: UserDefined, volatility: Immutable } } }, params: AggregateFunctionParams { args: [BinaryExpr(BinaryExpr { left: Column(Column { relation: Some(Bare { table: "bonuses" }), name: "bonus_amount" }), op: Multiply, right: Column(Column { relation: Some(Bare { table: "bonuses" }), name: "multiplier" }) })], distinct: false, filter: None, order_by: None, null_treatment: None } })], schema: DFSchema { inner: Schema { fields: [Field { name: "employee_id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "exp(bonuses.bonus_amount)", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "sum(bonuses.bonus_amount * bonuses.multiplier)", data_type: Decimal128(38, 20), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "bonuses" }), None, None], functional_dependencies: FunctionalDependencies { deps: [FunctionalDependence { source_indices: [0, 1], target_indices: [0, 1, 2], nullable: true, mode: Single }] } } }), schema: DFSchema { inner: Schema { fields: [Field { name: "employee_id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "exp_bonus", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "total_bonus", data_type: Decimal128(38, 20), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "bonuses" }), None, None], functional_dependencies: FunctionalDependencies { deps: [FunctionalDependence { source_indices: [0, 1], target_indices: [0, 1, 2], nullable: true, mode: Single }] } } }), alias: Bare { table: "b" }, schema: DFSchema { inner: Schema { fields: [Field { name: "employee_id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "exp_bonus", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "total_bonus", data_type: Decimal128(38, 20), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "b" }), Some(Bare { table: "b" }), Some(Bare { table: "b" })], functional_dependencies: FunctionalDependencies { deps: [FunctionalDependence { source_indices: [0, 1], target_indices: [0, 1, 2], nullable: true, mode: Single }] } } }), on: [], filter: Some(BinaryExpr(BinaryExpr { left: Column(Column { relation: Some(Bare { table: "emp_dept" }), name: "employee_id" }), op: Eq, right: Column(Column { relation: Some(Bare { table: "b" }), name: "employee_id" }) })), join_type: Left, join_constraint: On, schema: DFSchema { inner: Schema { fields: [Field { name: "employee_id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "employee_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "base_salary", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "department_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "dept_budget", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "employee_id", data_type: Int32, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "exp_bonus", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "total_bonus", data_type: Decimal128(38, 20), nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "emp_dept" }), Some(Bare { table: "emp_dept" }), Some(Bare { table: "emp_dept" }), Some(Bare { table: "emp_dept" }), Some(Bare { table: "emp_dept" }), Some(Bare { table: "b" }), Some(Bare { table: "b" }), Some(Bare { table: "b" })], functional_dependencies: FunctionalDependencies { deps: [] } }, null_equals_null: false }), schema: DFSchema { inner: Schema { fields: [Field { name: "employee_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "department_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "total_compensation", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "dept_budget", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "bonus", data_type: Decimal128(38, 20), nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "emp_dept" }), Some(Bare { table: "emp_dept" }), None, Some(Bare { table: "emp_dept" }), None], functional_dependencies: FunctionalDependencies { deps: [] } } }), alias: Bare { table: "final" }, schema: DFSchema { inner: Schema { fields: [Field { name: "employee_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "department_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "total_compensation", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "dept_budget", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "bonus", data_type: Decimal128(38, 20), nullable: false, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "final" }), Some(Bare { table: "final" }), Some(Bare { table: "final" }), Some(Bare { table: "final" }), Some(Bare { table: "final" })], functional_dependencies: FunctionalDependencies { deps: [] } } }) }), schema: DFSchema { inner: Schema { fields: [Field { name: "employee_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "department_name", data_type: Utf8View, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "exp_compensation", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "ln_budget", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }, Field { name: "sqrt_bonus", data_type: Float64, nullable: true, dict_id: 0, dict_is_ordered: false, metadata: {} }], metadata: {} }, field_qualifiers: [Some(Bare { table: "final" }), Some(Bare { table: "final" }), None, None, None], functional_dependencies: FunctionalDependencies { deps: [] } } })

[COL_LINEAGE] Processing projection expr: e.id AS employee_id -> employee_id
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: e.id
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for employee_id with 1 sources
[COL_LINEAGE] Processing projection expr: e.name AS employee_name -> employee_name
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: e.name
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for employee_name with 1 sources
[COL_LINEAGE] Processing projection expr: exp(e.salary) AS base_salary -> base_salary
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: e.salary
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for base_salary with 1 sources
[COL_LINEAGE] Processing projection expr: d.name AS department_name -> department_name
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: d.name
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for department_name with 1 sources
[COL_LINEAGE] Processing projection expr: ln(d.budget) AS dept_budget -> dept_budget
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: d.budget
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for dept_budget with 1 sources
[COL_LINEAGE] Processing projection expr: bonuses.employee_id -> bonuses.employee_id
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: bonuses.employee_id
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for bonuses.employee_id with 1 sources
[COL_LINEAGE] Processing projection expr: exp(bonuses.bonus_amount) AS exp_bonus -> exp_bonus
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: exp(bonuses.bonus_amount)
[COL_LINEAGE]     No lineage found for exp(bonuses.bonus_amount)
[COL_LINEAGE]   WARNING: No sources found for output column exp_bonus
[COL_LINEAGE] Processing projection expr: sum(bonuses.bonus_amount * bonuses.multiplier) AS total_bonus -> total_bonus
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: sum(bonuses.bonus_amount * bonuses.multiplier)
[COL_LINEAGE]     No lineage found for sum(bonuses.bonus_amount * bonuses.multiplier)
[COL_LINEAGE]   WARNING: No sources found for output column total_bonus
[COL_LINEAGE] Processing projection expr: emp_dept.employee_name -> emp_dept.employee_name
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: emp_dept.employee_name
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for emp_dept.employee_name with 1 sources
[COL_LINEAGE] Processing projection expr: emp_dept.department_name -> emp_dept.department_name
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: emp_dept.department_name
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for emp_dept.department_name with 1 sources
[COL_LINEAGE] Processing projection expr: emp_dept.base_salary + coalesce(b.total_bonus, Int64(0)) AS total_compensation -> total_compensation
[COL_LINEAGE]   Found 2 column refs
[COL_LINEAGE]   Looking up lineage for: emp_dept.base_salary
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Looking up lineage for: b.total_bonus
[COL_LINEAGE]     No lineage found for b.total_bonus
[COL_LINEAGE]   Created lineage for total_compensation with 1 sources
[COL_LINEAGE] Processing projection expr: emp_dept.dept_budget -> emp_dept.dept_budget
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: emp_dept.dept_budget
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for emp_dept.dept_budget with 1 sources
[COL_LINEAGE] Processing projection expr: coalesce(b.total_bonus, Int64(0)) AS bonus -> bonus
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: b.total_bonus
[COL_LINEAGE]     No lineage found for b.total_bonus
[COL_LINEAGE]   WARNING: No sources found for output column bonus
[COL_LINEAGE] Processing projection expr: final.employee_name -> final.employee_name
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: final.employee_name
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for final.employee_name with 1 sources
[COL_LINEAGE] Processing projection expr: final.department_name -> final.department_name
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: final.department_name
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for final.department_name with 1 sources
[COL_LINEAGE] Processing projection expr: exp(final.total_compensation) AS exp_compensation -> exp_compensation
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: final.total_compensation
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for exp_compensation with 1 sources
[COL_LINEAGE] Processing projection expr: ln(final.dept_budget) AS ln_budget -> ln_budget
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: final.dept_budget
[COL_LINEAGE]     Found lineage with 1 sources
[COL_LINEAGE]   Created lineage for ln_budget with 1 sources
[COL_LINEAGE] Processing projection expr: sqrt(final.bonus) AS sqrt_bonus -> sqrt_bonus
[COL_LINEAGE]   Found 1 column refs
[COL_LINEAGE]   Looking up lineage for: final.bonus
[COL_LINEAGE]     No lineage found for final.bonus
[COL_LINEAGE]   WARNING: No sources found for output column sqrt_bonus
test test_complex_column_lineage_with_coalesce ... FAILED

failures:

failures:
    test_complex_column_lineage_with_coalesce

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 5 filtered out; finished in 0.42s

