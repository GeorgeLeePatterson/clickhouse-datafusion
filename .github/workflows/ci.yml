name: CI

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write  # Required for security audit to create check runs

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: '-C debuginfo=line-tables-only -C incremental=false'

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - nightly
    steps:
    - uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Install nightly for formatting
      if: matrix.rust == 'stable'
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rustfmt

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Configure Git for private dependencies
      run: |
        git config --global url."https://github.com/".insteadOf "git@github.com:"
        git config --global advice.detachedHead false

    # NOTE: Nightly is always used since rustfmt requires it for some settings
    - name: Check formatting
      run: cargo +nightly fmt -- --check

    - name: Run clippy
      run: |
        if [[ "${{ matrix.rust }}" == "nightly" ]]; then
          cargo +nightly clippy --all-features --all-targets
        else
          cargo +stable clippy --all-features --all-targets -- -D warnings
        fi

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Unit tests - all feature combinations
          - test-type: "unit"
            features: "test-utils,mocks"
          - test-type: "unit" 
            features: "test-utils"
          - test-type: "unit"
            features: "test-utils,mocks,federation"
          - test-type: "unit"
            features: "test-utils,federation"
          # Integration tests - only federation vs no federation
          - test-type: "integration"
            features: "test-utils"
          - test-type: "integration"
            features: "test-utils,federation"
    steps:
    - uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Configure Git for private dependencies
      run: |
        git config --global url."https://github.com/".insteadOf "git@github.com:"
        git config --global advice.detachedHead false

    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        CLICKHOUSE_NATIVE_DEBUG_ARROW= RUST_LOG= cargo test --lib \
          -F ${{ matrix.features }} -- --nocapture --show-output

    - name: Run integration tests
      if: matrix.test-type == 'integration'
      run: |
        CLICKHOUSE_NATIVE_DEBUG_ARROW= RUST_LOG= cargo test \
          -F ${{ matrix.features }} --test "e2e" -- --nocapture --show-output

    # TODO: Convert doc test to tests and reenable
    # - name: Run doc tests
    #   run: cargo +${{ matrix.rust }} test --doc --all-features

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      run: |
        cargo llvm-cov clean --workspace
        cargo llvm-cov --lcov --no-report --ignore-filename-regex "(examples).*" -F test-utils,mocks
        cargo llvm-cov --lcov --no-report --ignore-filename-regex "(examples).*" -F test-utils
        cargo llvm-cov --lcov --no-report --ignore-filename-regex "(examples).*" -F test-utils,mocks,federation
        cargo llvm-cov --lcov --no-report --ignore-filename-regex "(examples).*" -F test-utils,federation
        cargo llvm-cov report --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: lcov.info
        fail_ci_if_error: true
        disable_telem: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: rustsec/audit-check@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  # Summary job that branch protection can depend on
  ci-success:
    name: CI Success
    needs: [check, test, coverage, security]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ needs.check.result }}" != "success" ||
                "${{ needs.test.result }}" != "success" ||
                "${{ needs.coverage.result }}" != "success" ||
                "${{ needs.security.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully!"
